Assignment - 1 - Deepesh Shrestha

Short notes on Python libraries: (comparing with and blending digital and magical realm in the explanation)
			

1. NumPy (Bedrock of Numerical Computing)

	In the mystical lands of digital magic, data is a fundamental source of energy (mana) that every data wizards or alchemists (data scientists) rely to perform spells (make models) for the understanding of their surroundings (systems). This require plethora of theory on how magic works (mathematical concepts) and tools (libraries and platform) to build spells (models). Among these tools, NumPy, Pandas, Scikit-learn, TensorFlow, Keras, PyTorch, and many more like Matplotlib and Seaborn stands out from the crowd.

	The term 'NumPy' basically is a portmanteau of 'Number' and 'Python'. It gives a literal meaning of 'Numerical Python' and serves as a foundation for the scientific computation of numbers in Python (numeric computation). Since it is a foundation for scientific computation in Python, it involves simulation and modeling (to simulate physical, biological or social systems) of numbers with interdisciplinary approach (combine several fields like computer science, applied mathematics, or any other domain-specific knowledge). 

	It can be thought of as a huge spreadsheet (or a variant of it) where one can store data in terms of number, and operate and manipulate on it. But rather than using traditional rows and column of the spreadsheet, this library (a variant of a giant spreadsheet) uses arrays as its base to perform calculations and manipulate data. The arrays act as a container with different shape (dimensions) and size that holds data (basically numbers only) upon which core mathematical concepts such as matrices operation, linear algebra, trigonometric, statistical, arithmetic functions are operated upon. 

	Since NumPy works on the foundation of the concept of array (container for numbers), its key features also revolve around it. 

	These basically include arrays (obviously since it is the core of NumPy), broadcasting (to perform operations on array of multiple shapes/dimensions without having to manually set/align them, e.g. ability to add a single number to every cell without the use of multiple copy and paste feature), universal functions/ufuncs (similar to broadcasting but with functions, e.g. ability to use a ufuncs to perform basic math operations like add, subtract, multiple, or divide every element in an array), linear algebra (matrix operations required for scientific and engineering calculations), and also consists of an ability to generate random numbers for the purpose of simulations, statistical sampling.

	NumPy also acts as the backbone for many other libraries including Pandas and Scikit-learn (sklearn).

--------------------------------------------------------------------------------------------
 

2. Pandas (Crafting Order from Data Chaos)
	
	Like NumPy, Pandas is another powerful library built on the capabilities of NumPy. The term 'Pandas' is a portmanteau of 'Panel' and 'Datasets', and is an econometric term (application of statistical methods to economic data to give empirical content to the data, i.e. to basically understand economic relationships using math and statistics) that reflects the library's ability to handle structured data and time series data effectively. NumPy provided a foundational library for numerical computations in Python, and also provided the fundamental building blocks for data representation and manipulation. Due to the messy nature (complexity) of data, econometricians (those that deal with econometrics) required more structured data types and higher-level functions to understand the relationships between data. Pandas emerged as a response to this requirement, growing upon NumPy's capabilities to offer a more intuitive and efficient data analysis experience.

	This library can be thought of as a relational database (or a variant of it) or a toolkit that provides powerful tools to clean, transform, analyze, and visualize data, be it smaller or larger datasets. It works with similarly to the concept of a Relational database which contains columns and tables to analyze data. Similarly, Pandas introduces data structures like Series and DataFrames to simulate relational database, in which Series works like a single column of data, or a one-dimensional labeled array, and can hold any data-type while DataFrames functions as a two-dimensional labeled data structure with rows and columns to handle tabular data.

	Pandas come up with many neat features such as Data Structures (Series and DataFrames), Indexing (to access data and make manipulation more intuitive using label-based indexing, slicing, Boolean indexing), Data Cleaning (functions to handle missing data, remove duplicates, and more) and Data Transformation (rich set of functions to merge, join, group or reshape data). Pandas also come with specialized tools for handling time series data, including frequency conversion, date range creation and time-based indexing. Pandas also has the capability to compute summary of group data, and perform complex operations with simple commands and can integrate well with visualization libraries like Matplotlib and Seaborn to create beautiful plots for data analysis and visualization purposes.
	
	In essence, Pandas leverages the performance and efficiency of NumPy while providing a higher-level abstraction for data analysis. This combination makes it an ideal choice for data alchemists (data scientists, econometricians, and analysts) dealing with raw data and extracting refined information from it.

--------------------------------------------------------------------------------------------
 

3. Scikit-Learn (sklearn) (The ML Toolbox/Workbench)

	Further stepping up the data wizardry game (simply put data analysis), after retrieving the 'refined' data, i.e. energy source or mana required for the function of spell (this data contains information and patterns/relationships) from its chaos, it can be extrapolated to obtain theoretical values (prediction) which then data alchemists use to apply sense in the physical realm. Turns out to do obtain prediction, those data must be subjected to complex spells (specialized algorithms). In the realm of digital magic, data wizards/alchemists (technically data scientists) are equipped with the tools they need to build spells (in this case, models, specifically machine learning models). They apply their theory of spells (mathematics behind ML models) and build an actual spell (model) using tools. Here, scikit-learn can be referred to as a versatile toolbox that facilitates creation of the ML model. 

	Digging deeper into the source of toolbox (Scikit-learn), this term actually is an amalgamation of 'scientific' and 'kit', implying its role in equipping data scientists with essential tools to build intelligent systems (models in this case). This library is built upon the foundation of NumPy. This means that NumPy arrays are used in Scikit-learn for storing and manipulating data. Exploring further beneath the mechanism, NumPy arrays are used to store features and target variables upon which their optimized functions are called for linear algebra operations, statistical calculations, and array manipulations. Utilizing the efficiency of NumPy, Scikit-learn can avoid the overhead of Python loops, thereby leading to faster computations. At the core of a machine learning model lies a mathematical function that takes a refined data as an input and gives an output (extrapolated value for example). This system of getting output from input is what defines an algorithm model. These algorithms consists of classification, regression, clustering, and dimensionality reduction. This library contain tools/utilities to adjust the datasets, for cross-validation purposes and hyperparameter tuning. This allows data alchemists to tinker their spells (models) and evaluate model performance through metrics provided by this toolkit (library) thus resulting an accurate and reliable model. 

	This toolkit might seem like an arcane puzzle itself for rookie data apprentices (trainee or newbies), but it is known for its user-friendliness contrary to their expectations. This library supports creation of pipelines (sequences or stream of data processing steps) to streamline (maintain proper flow without obstructions) ML workflows. It also offers consistent API (Application Programming Interface) for the purpose of communicating and exchanging data with an actual system and comprehensive documentation for rookie data apprentices. Since these tools and Pandas are based on NumPy, they are tightly integrated with each other and can perform efficiently without giving much trouble.

--------------------------------------------------------------------------------------------
 

4. TensorFlow (A DL Colossus, an ancient relic of Precision and Power)

	As the digital magic era blossoms, several sects/guilds (organizations) mark themselves as titans and contribute for further advancement of the era. Google, a titan in the world of advanced digital magic era (with their S-tier data wizards and alchemists) have crafted an artifact that is open to use (open-source platform) by all tiers of data alchemists or their apprentices to perform their magic on. They termed this artifact 'TensorFlow'. The name of this artifact itself echoes the very essence of its function, where the flow of mana (data) channels through a series of intricate mana circuits (data structures), in which it gets transformed and amplified to cast potent spells (ML/DL Models)

	At the heart of TensorFlow lies the concepts of 'Tensors', akin to pools of raw mana - pure, multi-dimensional sources of energy that can take on various forms and shapes, just like a mana might in the hands of a skilled sorcerer. These tensors are guided through pre-defined static computational graphs (or mana circuits) in which each node represents a magical operation (mathematical operation, either simple or complex incantation of deep learning). As mana (data) flows through these circuits, it gets channeled, manipulated, and even transformed that allows data sorcerers (data scientists) to weave spells (operate on models) that can, for instance, see into the future (through predictive models), or even recognize old friends (image recognition model), or can even decipher the whispered secrets of ancient scripts (natural language processing).

	The core magical theory (mathematical theory) behind the artifact (library) lies in the ancient discipline of calculus and linear algebra. These domains provides the foundation for creating and optimizing mana circuits, thereby ensuring that the flow of mana is smooth and efficient. But what sets this TensorFlow apart in this realm of digital sorcery is its scalability and adaptability. It means either F-tier novice data trainees or even S-tier data sage can wield this artifact with equal proficiency with no limitations on its use.  
This magical artifact can even help a bottom F-tier data apprentices/trainee to advance on their sorcery journey by tutoring them with simple spells on a single mana source. As the trainee evolves into higher ranked wizards, and saints of data, the artifact allows them to tap into power of multiple mana sources (GPUs or distributed systems) and enables them to craft spells of incredible potency and complexity.

	Furthermore, TensorFlow's integration with Keras (powerful spell book yet approachable) simplifies the difficulty that an aspiring alchemists face when experimenting with magic of deep learning. TensorFlow is not just a tool, but an evolving spirit as it draws from collective knowledge of guilds and rogue wizards (freelancers) alike. It is a beacon for all tiers of data sorcerers, guiding them in their never-ending quest to harness the boundless potential of digital mana and extend the boundary of machine learning and deep learning domain in the world of digital magic.

--------------------------------------------------------------------------------------------
 

5. Keras (The Aspiring Youth's Spell book for Deep Learning)

	In the grand scheme of digital magic realm, where the flow of mana (data) and the weaving of spells (models) dictate the forces of human civilization, Keras emerges as a tome of arcane knowledge that both novice and seasoned data alchemists can wield with ease.
	
	This spellbook known as Keras was conceived to simplify the process of crafting potent spells in the art of deep learning magic. In opposition to the manipulation of raw mana using complex and intricate rituals within TensorFlow, Keras offers a more intuitive way to channel this energy. Keras is based upon the core idea that 'every powerful sorcerers began their journey as apprentices, learning to control their magic with basic incantations before progressing to the grand spells). 

	Within the spellbook (Keras), the spells are composed of layers, which when woven together can form a powerful enchantment. These layers can be combined in various sequences to shape the spell to perform tasks, be it to recognize patterns, predict outcomes, or even generate new forms of digital life (LLMs, Robots). 

	Keras is intrinsically linked to TensorFlow (it is a high-level API of TensorFlow), similar to how a revered spellbook is tied to the mana circuits of a powerful artifact (like a guide). TensorFlow offers raw power and flexibility of ancient magical theory (mathematical theory), Keras focuses on artistry of spell-crafts (experimenting with different configurations, refining incantations, observing effects of magic) without getting lost in the depths (how and why) of the arcane complexities of the underlying mana circuits. When crafting spell (making models) using Keras, this spellbook (library) interacts with TensorFlow's mana circuits (data structures), thereby translating high-level incantation into precise movements of mana (data) that the artifact (TensorFlow) requires. The formidable alliance between the spellbook and artifact allows harmonious flow of energy in which the simplicity of Keras enhances the raw potential of TensorFlow, making it available to all those wizards who seek it and ultimately push the boundaries of what is possible in the world of digital magic.

--------------------------------------------------------------------------------------------
 

6. PyTorch (The Spiritual Spellbook of Flexibility and Creativity)

	In the realm of digital magic, where mana (data) courses through enchanted circuits (data structures) and powerful spells (models) shape the fabric of reality, another relic (library) stands out among the ancient relics (TensorFlow), called PyTorch. This artifact was forged by the master alchemists of another titan, Facebook. This relic differs from TensorFlow in a sense that it is seen as a dynamic and adaptive artifact (library) that responds to the whims of its wielder in real-time. Hence, it is beloved by those who walk the path of creativity, research and excavation.

	The core of PyTorch lies in its dynamic mana circuits, known as 'dynamic computation graphs'. Unlike the more rigid, predefined circuits (graphs) of TensorFlow, PyTorch's circuits (dynamic computation graphs) are conjured in the moment, springing to life as mana (data) flows through them (created only when needed). This suggests that the spells (models) crafted with PyTorch can adapt and change in response to the whim of the alchemist (data scientist), without being bound by the rigid constraints of pre-defined circuits, hence, offering a level of freedom and creativity that is unmatched in the digital magic realm.

	Tensors (those ethereal pools of raw mana) are also central to the magic of PyTorch like other artifacts. These tensors are multi-dimensional reservoirs of energy, ready to be shaped and transformed on the hands of sorcerer. But the catch is that PyTorch offers a unique mastery over these tensors (due to dynamic nature of PyTorch), allowing for complex manipulations and real-time adjustments as the spell (model) takes shape. The sorcerer can witness the effects of their incantations immediately, thereby making it easier to understand and control the flow of mana (data). 

	In the end, PyTorch's tensors can easily integrate with other elements of the wizard's arsenal, such as data cauldrons NumPy, (does not support DataFrames of Pandas directly, should convert to NumPy arrays first) or other enchantment spell book (Keras using high-level APIs like PyTorch Lightning). This seamless integration enhances the sorcerer's ability to experiment, iterate, and refine their magic, making PyTorch an ideal tool for those creative limit testers who seek to push the boundaries of their craft.

--------------------------------------------------------------------------------------------
